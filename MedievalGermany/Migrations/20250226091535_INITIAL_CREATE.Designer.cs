// <auto-generated />
using MedievalGermany.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedievalGermany.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250226091535_INITIAL_CREATE")]
    partial class INITIAL_CREATE
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedievalGermany.Domain.Models.Castle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int?>("Eroeffnet")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WikipediaUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Castles");
                });

            modelBuilder.Entity("MedievalGermany.Domain.Models.Castle", b =>
                {
                    b.OwnsOne("MedievalGermany.Domain.Models.Geolocation", "Geolocation", b1 =>
                        {
                            b1.Property<string>("CastleId")
                                .HasColumnType("text");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("CastleId");

                            b1.ToTable("Castles");

                            b1.WithOwner()
                                .HasForeignKey("CastleId");
                        });

                    b.Navigation("Geolocation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
