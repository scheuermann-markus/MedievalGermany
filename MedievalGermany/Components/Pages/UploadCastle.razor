@page "/upload-castle"
@using System.ComponentModel.DataAnnotations
@using FluentValidation
@inject ICastleService CastleService
@inject IValidator<ViewModel> Validator

@if (Model != null)
{
    <EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">
        <div class="upload-castle">

            <div class="upload-castle__row--one">
                <div class="upload-castle__input-wrapper">
                    <label for="name">Name</label>
                    <InputText @bind-Value="Model.Name" class="@GetValidationCss(nameof(Model.Name))" placeholder="Schloss Neuschwanstein" />
                    <ValidationMessage For="() => Model.Name" class="upload-castle__validation-message" />
                </div>
                <div class="upload-castle__input-wrapper">
                    <label for="eroeffnet">Eröffnet</label>
                    <InputNumber @bind-Value="Model.Eroeffnet" />
                    <ValidationMessage For="() => Model.Eroeffnet" class="upload-castle__validation-message" />
                </div>
            </div>

            <div class="upload-castle__row--two">
                <div class="upload-castle__input-wrapper">
                    <label for="wikipediaUrl">Wikipedia URL</label>
                    <InputText @bind-Value="Model.WikipediaUrl" placeholder="..." />
                </div>
                <div class="upload-castle__input-wrapper">
                    <label for="imageUrl">Image URL</label>
                    <InputText @bind-Value="Model.ImageUrl" placeholder="..." />
                </div>
            </div>

            <div class="upload-castle__row--three">
                <div class="upload-castle__input-wrapper">
                    <label for="latitude">Latitude</label>
                    <InputNumber @bind-Value="Model.Latitude" class="@GetValidationCss(nameof(Model.Latitude))" />
                    <ValidationMessage For="() => Model.Latitude" class="upload-castle__validation-message" />
                </div>
                <div class="upload-castle__input-wrapper">
                    <label for="longitude">Longitude</label>
                    <InputNumber @bind-Value="Model.Longitude" class="@GetValidationCss(nameof(Model.Longitude))" />
                    <ValidationMessage For="() => Model.Longitude" class="upload-castle__validation-message" />
                </div>
            </div>

            <button type="submit" class="upload-castle__speichern-btn">Speichern</button>
        </div>
    </EditForm>
}

@code {
    public ViewModel Model { get; set; } = new ViewModel() { Eroeffnet = 1884 };
    private EditContext _editContext;
    private ValidationMessageStore _validationMessageStore;


    protected override void OnInitialized()
    {
        _editContext = new EditContext(Model);
        _validationMessageStore = new ValidationMessageStore(_editContext);

        // Validierung registrieren
        _editContext.OnValidationRequested += ValidateModel;
    }

    private async Task HandleValidSubmit()
    {
        _validationMessageStore.Clear(); // Vorherige Validation-Messages entfernen

        // ViewModel auf Castle-Klasse mappen
        var caslte = new Castle
        {
            Name = Model.Name,
            Eroeffnet = Model.Eroeffnet,
            WikipediaUrl = Model.WikipediaUrl,
            ImageUrl = Model.ImageUrl,
            Geolocation = new Geolocation
            {
                Latitude = Model.Latitude,
                Longitude = Model.Longitude
            }
        };

        await CastleService.SafeCastle(caslte);
    }

    private void ValidateModel(object? sender, ValidationRequestedEventArgs args)
    {
        var validationResult = Validator.Validate(Model);
        _validationMessageStore.Clear();

        if (!validationResult.IsValid)
        {
            foreach (var error in validationResult.Errors)
            {
                var fieldIdentifier = new FieldIdentifier(Model, error.PropertyName);
                _validationMessageStore.Add(fieldIdentifier, error.ErrorMessage);
            }
        }

        _editContext.NotifyValidationStateChanged();
    }

    private string GetValidationCss(string propertyName)
    {
        var fieldIdentifier = new FieldIdentifier(Model, propertyName);
        var validationMessages = _editContext.GetValidationMessages(fieldIdentifier);
        return validationMessages.Any() ? "input-validation-error" : string.Empty;
    }

    public class ViewModel
    {
        public string Name { get; set; } = string.Empty;
        public int Eroeffnet { get; set; }
        public string? WikipediaUrl { get; set; }
        public string? ImageUrl { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }

        public class Validator : AbstractValidator<ViewModel>
        {
            public Validator()
            {
                RuleFor(e => e.Name).NotEmpty().WithMessage("Geben Sie einen Namen an.");
                RuleFor(e => e.Latitude).Cascade(CascadeMode.StopOnFirstFailure)
                                        .NotEmpty()
                                        .WithMessage("Bitte geben Sie eine Latitude an.")
                                        .Must((viewmodel, validatorcontext) =>
                                            ValidateLatitude(viewmodel.Latitude))
                                        .WithMessage("Latitude muss zwischen 47.2 und 55.5 sein.");
                RuleFor(e => e.Longitude).Cascade(CascadeMode.StopOnFirstFailure)
                                        .NotEmpty()
                                        .WithMessage("Bitte geben Sie eine Longitude an.")
                                        .Must((viewmodel, validatorcontext) =>
                                            ValidateLongitude(viewmodel.Longitude))
                                        .WithMessage("Longitude muss zwischen 5.8 und 14.86 sein.");
            }
        }

        // Validation function for Latitude
        static bool ValidateLatitude(double latitude)
        {
            if (latitude >= 47.2 && latitude <= 55.5)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        // Validation function for Longitude
        static bool ValidateLongitude(double longitude)
        {
            if (longitude >= 5.8 && longitude <= 14.86)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    public void Dispose()
    {
        // Validierung disposen
        _editContext.OnValidationRequested -= ValidateModel;
    }
}
