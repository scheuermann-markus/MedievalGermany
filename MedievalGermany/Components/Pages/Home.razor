@using MedievalGermany.Components.Components

@page "/"
@inject ICastleService CastleService

<PageTitle>Medieval Germany</PageTitle>

<ImageUpload />

<section class="search-section">
    <div>
        <input type="text" @bind-value="@_searchArguments.Suchtext" @bind-value:event="onchange" @bind-value:after="Requery" placeholder="Suchtext..." />
    </div>
</section>

<section class="feed-section">
    @if (Castles != null)
    {
        <div class="feed__cards-container">
            @foreach (var castle in Castles)
            {
                <CastleCard Castle="@castle" />
            }
        </div>

        <div class="feed__karte-wrapper">
            <Deutschlandkarte Castles="@Castles" OnMapViewChange="HandleOnMapViewChange" />
        </div>
    }
</section>

@code {
    IEnumerable<Castle>? Castles { get; set; } 
    private SearchArguments _searchArguments { get; set; } = new SearchArguments();
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();



    protected override async Task OnInitializedAsync()
    {
        await Requery();

        await base.OnInitializedAsync();
    }

    async Task Requery()
    {
        // Evtl. laufende Vorgänge abbrechen
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();
        var cancellationToken = _cancellationTokenSource.Token;

        Castles = await CastleService.GetCastles(_searchArguments, cancellationToken);
    }

    async Task HandleOnMapViewChange(BoundingBox boundingBox)
    {
        // SearchArguments mit BoundingBox updaten
        _searchArguments.BoundingBox = boundingBox;

        // Neuladen
        await Requery();
    }
}