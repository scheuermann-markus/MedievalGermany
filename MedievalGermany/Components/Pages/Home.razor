@page "/"
@inject ICastleService CastleService

<PageTitle>Medieval Germany</PageTitle>

<section class="home">
    <div class="home__left">
        <div class="home__text-search-wrapper">
            <input class="home__text-search" type="text" @bind-value="@_searchArguments.Suchtext" @bind-value:event="onchange" @bind-value:after="Requery" placeholder="Suchtext..." />
            @if (_searchArguments.Suchtext.IsNotNullOrWhiteSpace())
            {
                <svg @onclick="ClearSearchText" class="home__text-search__icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 352 512"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M242.7 256l100.1-100.1c12.3-12.3 12.3-32.2 0-44.5l-22.2-22.2c-12.3-12.3-32.2-12.3-44.5 0L176 189.3 75.9 89.2c-12.3-12.3-32.2-12.3-44.5 0L9.2 111.5c-12.3 12.3-12.3 32.2 0 44.5L109.3 256 9.2 356.1c-12.3 12.3-12.3 32.2 0 44.5l22.2 22.2c12.3 12.3 32.2 12.3 44.5 0L176 322.7l100.1 100.1c12.3 12.3 32.2 12.3 44.5 0l22.2-22.2c12.3-12.3 12.3-32.2 0-44.5L242.7 256z" /></svg>
            }
        </div>

        <hr class="home__divider" />

        @if (Castles != null)
        {
            <div class="home__cards-wrapper">
                @foreach (var castle in Castles)
                {
                    <CastleCard Castle="@castle" />
                }
            </div>
        }
    </div>

    <div class="home__right">
        @if (Castles != null)
        {
            <div class="home__deutschlandkarte-wrapper">
                <Deutschlandkarte Castles="@Castles" OnMapViewChange="HandleOnMapViewChange" />
            </div>
        }
    </div>
</section>

@code {
    IEnumerable<Castle>? Castles { get; set; } 
    private SearchArguments _searchArguments { get; set; } = new SearchArguments();
    private CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();



    protected override async Task OnInitializedAsync()
    {
        await Requery();

        await base.OnInitializedAsync();
    }

    async Task Requery()
    {
        // Evtl. laufende Vorgänge abbrechen
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();
        var cancellationToken = _cancellationTokenSource.Token;

        Castles = await CastleService.GetCastles(_searchArguments, cancellationToken);
    }

    async Task HandleOnMapViewChange(BoundingBox boundingBox)
    {
        // SearchArguments mit BoundingBox updaten
        _searchArguments.BoundingBox = boundingBox;

        // Neuladen
        await Requery();
    }

    async Task ClearSearchText()
    {
        if (_searchArguments.Suchtext != string.Empty)
        {
            _searchArguments.Suchtext = string.Empty;

            await Requery();
        }
    }
}